// This file is @generated by prost-build.
/// UnixFS data structure
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Data {
    #[prost(enumeration = "data::DataType", tag = "1")]
    pub r#type: i32,
    /// File data (for small files or chunks)
    #[prost(bytes = "vec", optional, tag = "2")]
    pub data: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// Total file size (for chunked files)
    #[prost(uint64, tag = "3")]
    pub filesize: u64,
    /// Sizes of child blocks (for chunked files)
    #[prost(uint64, repeated, tag = "4")]
    pub blocksizes: ::prost::alloc::vec::Vec<u64>,
    /// Hash type for HAMT sharding
    #[prost(uint64, tag = "5")]
    pub hash_type: u64,
    /// Fanout for HAMT sharding
    #[prost(uint64, tag = "6")]
    pub fanout: u64,
    /// Unix file mode
    #[prost(uint32, tag = "7")]
    pub mode: u32,
    /// Modification time
    #[prost(message, optional, tag = "8")]
    pub mtime: ::core::option::Option<UnixTime>,
}
/// Nested message and enum types in `Data`.
pub mod data {
    /// Type of the UnixFS node
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum DataType {
        Raw = 0,
        Directory = 1,
        File = 2,
        Metadata = 3,
        Symlink = 4,
        HamtShard = 5,
    }
    impl DataType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                DataType::Raw => "Raw",
                DataType::Directory => "Directory",
                DataType::File => "File",
                DataType::Metadata => "Metadata",
                DataType::Symlink => "Symlink",
                DataType::HamtShard => "HAMTShard",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "Raw" => Some(Self::Raw),
                "Directory" => Some(Self::Directory),
                "File" => Some(Self::File),
                "Metadata" => Some(Self::Metadata),
                "Symlink" => Some(Self::Symlink),
                "HAMTShard" => Some(Self::HamtShard),
                _ => None,
            }
        }
    }
}
/// Unix timestamp
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnixTime {
    #[prost(int64, tag = "1")]
    pub seconds: i64,
    #[prost(fixed32, tag = "2")]
    pub fractional_nanoseconds: u32,
}
/// Metadata for files/directories
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metadata {
    #[prost(string, tag = "1")]
    pub mime_type: ::prost::alloc::string::String,
}
